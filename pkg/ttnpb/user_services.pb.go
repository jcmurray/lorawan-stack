// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/user_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_82df9ba9356987c4)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/user_services.proto", fileDescriptor_82df9ba9356987c4)
}

var fileDescriptor_82df9ba9356987c4 = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x41, 0x6c, 0xdc, 0x44,
	0x14, 0xf5, 0x84, 0xb0, 0xc0, 0x34, 0x8a, 0xe8, 0x50, 0x92, 0x76, 0x13, 0xfd, 0x52, 0x93, 0x36,
	0x62, 0x21, 0xb6, 0x48, 0x2a, 0x21, 0x15, 0x71, 0x28, 0x05, 0x45, 0x15, 0x48, 0x44, 0x34, 0xbd,
	0x80, 0x44, 0x70, 0x76, 0x7f, 0x9c, 0xd1, 0xa6, 0xb6, 0x99, 0x99, 0x6c, 0xb4, 0x44, 0xad, 0x4a,
	0x4f, 0x95, 0xb8, 0x20, 0x81, 0x04, 0x07, 0x0e, 0x5c, 0x90, 0x7a, 0xec, 0xb1, 0xc7, 0x1c, 0x7b,
	0xac, 0xc4, 0xa5, 0xc7, 0xae, 0xcd, 0xa1, 0xc7, 0x1e, 0x2b, 0x21, 0x21, 0xe4, 0x19, 0x7b, 0x37,
	0x6b, 0xaf, 0xbb, 0x2b, 0x71, 0xdb, 0xcc, 0x3c, 0xbf, 0xf7, 0xfe, 0xf3, 0xff, 0xdf, 0xa1, 0xe7,
	0xf7, 0x42, 0xe1, 0x1d, 0x78, 0xc1, 0x8a, 0x54, 0x5e, 0xb3, 0xed, 0x7a, 0x11, 0x77, 0xf7, 0x25,
	0x8a, 0x2d, 0x89, 0xa2, 0xc3, 0x9b, 0x28, 0x9d, 0x48, 0x84, 0x2a, 0x64, 0xb3, 0x4a, 0x05, 0x4e,
	0x06, 0x75, 0x3a, 0x6b, 0xf5, 0x45, 0x3f, 0x0c, 0xfd, 0x3d, 0xd4, 0x78, 0x2f, 0x08, 0x42, 0xe5,
	0x29, 0x1e, 0x06, 0x19, 0xba, 0xbe, 0x90, 0xdd, 0xea, 0xbf, 0xb6, 0xf7, 0x77, 0x5c, 0xbc, 0x11,
	0xa9, 0x6e, 0x76, 0xf9, 0x76, 0x59, 0x91, 0xb7, 0x30, 0x50, 0x7c, 0x87, 0xa3, 0xc8, 0x19, 0xa0,
	0x0c, 0x12, 0xdc, 0xdf, 0x55, 0xf9, 0xfd, 0xe2, 0x68, 0xdb, 0xe6, 0x76, 0xf5, 0x9f, 0x57, 0xe8,
	0xcc, 0x75, 0x89, 0xe2, 0x4b, 0xf4, 0xb9, 0x54, 0xa2, 0xcb, 0x36, 0x69, 0xed, 0x8a, 0x40, 0x4f,
	0x21, 0x3b, 0xe7, 0x0c, 0x57, 0xe2, 0x98, 0x73, 0x83, 0xfe, 0x6e, 0x1f, 0xa5, 0xaa, 0x9f, 0x2a,
	0x42, 0xd2, 0x4b, 0xfb, 0xe4, 0x9d, 0xbf, 0xfe, 0xfe, 0x79, 0xea, 0x84, 0x5d, 0xd3, 0x42, 0xf2,
	0x12, 0x69, 0xb0, 0x6f, 0xe8, 0x4b, 0xeb, 0xa8, 0x18, 0x14, 0xf1, 0xeb, 0xa8, 0xc6, 0xf3, 0x9d,
	0xd3, 0x7c, 0x0b, 0xec, 0x8c, 0xe1, 0x73, 0x0f, 0x75, 0xec, 0xbc, 0x25, 0x9d, 0xec, 0xc7, 0x4d,
	0xf6, 0x05, 0x9d, 0xfe, 0x9c, 0x4b, 0xc5, 0xde, 0x2a, 0x12, 0xa4, 0xa7, 0x29, 0x89, 0xcc, 0x25,
	0xde, 0x1c, 0x25, 0x21, 0xed, 0x59, 0xad, 0xf1, 0x2a, 0xcb, 0x3c, 0x33, 0x9f, 0xd6, 0xae, 0x47,
	0xad, 0x91, 0x31, 0x98, 0xf3, 0xf1, 0xb6, 0x97, 0x34, 0x25, 0xd4, 0x87, 0x6c, 0x3b, 0xc7, 0x6d,
	0xa7, 0xc9, 0xfc, 0x4a, 0xe8, 0xbc, 0x09, 0x76, 0x13, 0x6f, 0x44, 0xa1, 0xf0, 0x44, 0x77, 0xc3,
	0x93, 0xf2, 0x20, 0x14, 0x2d, 0xe6, 0x8c, 0x7e, 0x03, 0x25, 0x60, 0xee, 0x63, 0xce, 0x31, 0xdd,
	0xe4, 0xe4, 0xdd, 0xe4, 0x7c, 0x9a, 0x76, 0x93, 0x7d, 0x51, 0x3b, 0x71, 0xec, 0xf7, 0x2a, 0x03,
	0x74, 0x55, 0xce, 0xb9, 0x15, 0xe5, 0xea, 0x77, 0x08, 0x9d, 0x35, 0xb5, 0xf6, 0x0d, 0xbd, 0x53,
	0x9d, 0xc5, 0xa4, 0x5e, 0x56, 0xb4, 0x97, 0xe5, 0xba, 0x5d, 0xed, 0x25, 0x77, 0x90, 0xc6, 0xf3,
	0x35, 0xad, 0x7d, 0x82, 0x7b, 0xa8, 0x90, 0x9d, 0x1d, 0x15, 0xf2, 0xd5, 0xc1, 0x38, 0x54, 0x2a,
	0x9e, 0xd6, 0x8a, 0xac, 0xf1, 0x7a, 0x41, 0xf1, 0x26, 0xfb, 0x96, 0xbe, 0xbc, 0xb1, 0x2f, 0xfc,
	0xff, 0xc1, 0x0d, 0x9a, 0xfb, 0x74, 0x63, 0xae, 0xc8, 0xed, 0x46, 0x9a, 0xf8, 0x77, 0x42, 0xd9,
	0xa6, 0xf0, 0x02, 0xb9, 0x83, 0x42, 0x77, 0x8c, 0x9e, 0xcc, 0x72, 0x8e, 0x65, 0xcc, 0xb8, 0x1c,
	0xaf, 0x68, 0xe5, 0x8f, 0xec, 0x0f, 0x73, 0x65, 0x89, 0x41, 0xab, 0xf4, 0x56, 0x33, 0x5a, 0xf7,
	0x50, 0x60, 0x13, 0x79, 0xa7, 0x70, 0xbf, 0xfa, 0xef, 0x34, 0xa5, 0xa9, 0xe4, 0xe5, 0x66, 0x13,
	0xa5, 0x64, 0x3b, 0x94, 0xa6, 0xf3, 0x92, 0x99, 0x9c, 0x20, 0x94, 0x02, 0xc0, 0x3c, 0x68, 0x9f,
	0xd5, 0xd6, 0xce, 0xb0, 0xf9, 0x52, 0x28, 0x66, 0x31, 0xb1, 0x5b, 0x74, 0xc6, 0x74, 0xf2, 0xe5,
	0x8d, 0xab, 0x9f, 0x61, 0x97, 0x2d, 0x57, 0x6f, 0x1a, 0x83, 0x18, 0x84, 0x51, 0x00, 0x9a, 0xeb,
	0xbc, 0xa9, 0xec, 0x17, 0x34, 0x95, 0x17, 0xf1, 0x95, 0x36, 0x76, 0xf5, 0x36, 0xfa, 0x9e, 0x9e,
	0x48, 0xeb, 0x34, 0x0f, 0x4b, 0x76, 0xa1, 0x6a, 0x69, 0x64, 0x80, 0x5c, 0x7d, 0x7e, 0xb4, 0xba,
	0xb4, 0x1b, 0x5a, 0x7e, 0x89, 0x4d, 0x20, 0xcf, 0x6e, 0xd1, 0xd7, 0xd6, 0x31, 0x93, 0x66, 0x4b,
	0x15, 0xfb, 0x70, 0xb2, 0xaa, 0xd7, 0xb4, 0xec, 0x0a, 0x7b, 0x77, 0xbc, 0xac, 0x7b, 0xd8, 0xc6,
	0xae, 0xee, 0xf9, 0x1f, 0x09, 0x9d, 0x31, 0x53, 0x5b, 0x15, 0xfe, 0x60, 0xa6, 0x27, 0xb3, 0x71,
	0x49, 0xdb, 0xb8, 0x58, 0x77, 0x27, 0xb1, 0xe1, 0x45, 0x7c, 0xab, 0x8d, 0x5d, 0xc7, 0x6c, 0xbf,
	0xd5, 0xa3, 0x29, 0x3a, 0xa7, 0xdb, 0x2a, 0xe8, 0x70, 0xf3, 0x61, 0xec, 0x7f, 0x88, 0xb6, 0xe9,
	0xf4, 0x35, 0x0c, 0x5a, 0xec, 0x7c, 0x51, 0x36, 0x3d, 0x3d, 0x8e, 0x37, 0xee, 0xea, 0x45, 0xd8,
	0x00, 0x62, 0xcf, 0x6b, 0x87, 0x27, 0xed, 0x19, 0x97, 0xf7, 0x0f, 0x75, 0x23, 0x78, 0xd9, 0x67,
	0x63, 0x64, 0x07, 0x0c, 0x08, 0xfa, 0x1d, 0xb0, 0x50, 0x2d, 0x22, 0xed, 0x53, 0x5a, 0x65, 0x96,
	0x0d, 0xa9, 0xb0, 0xad, 0xfe, 0x02, 0x2b, 0x05, 0x6d, 0xce, 0xcb, 0xa5, 0x54, 0x8d, 0x7c, 0x26,
	0xd0, 0x18, 0x12, 0x58, 0xfd, 0x65, 0x8a, 0xbe, 0x91, 0x46, 0x78, 0x0d, 0xa5, 0x3c, 0x9e, 0x5f,
	0x37, 0xab, 0x6d, 0xb9, 0xaa, 0xbb, 0xb3, 0x07, 0xfa, 0xc5, 0x2d, 0x8e, 0x9a, 0xf7, 0x1c, 0x34,
	0x49, 0x8f, 0xcb, 0x0c, 0xcb, 0x7e, 0x20, 0xfd, 0xa2, 0x2f, 0xbc, 0x80, 0x74, 0x92, 0x05, 0xfb,
	0x81, 0x96, 0x7d, 0xbf, 0xe1, 0x8e, 0x97, 0x4d, 0x57, 0xa0, 0xfe, 0x95, 0x9e, 0x7e, 0xfc, 0x27,
	0x79, 0xd8, 0x03, 0xf2, 0xa8, 0x07, 0xe4, 0x71, 0x0f, 0xac, 0x27, 0x3d, 0xb0, 0x9e, 0xf6, 0xc0,
	0x7a, 0xd6, 0x03, 0xeb, 0x79, 0x0f, 0xc8, 0xed, 0x18, 0xc8, 0xdd, 0x18, 0xac, 0x7b, 0x31, 0x90,
	0xfb, 0x31, 0x58, 0x0f, 0x62, 0xb0, 0x8e, 0x62, 0xb0, 0x1e, 0xc6, 0x40, 0x1e, 0xc5, 0x40, 0x1e,
	0xc7, 0x60, 0x3d, 0x89, 0x81, 0x3c, 0x8d, 0xc1, 0x7a, 0x16, 0x03, 0x79, 0x1e, 0x83, 0x75, 0x3b,
	0x01, 0xeb, 0x6e, 0x02, 0xe4, 0xa7, 0x04, 0xac, 0xdf, 0x12, 0x20, 0x7f, 0x24, 0x60, 0xdd, 0x4b,
	0xc0, 0xba, 0x9f, 0x00, 0x79, 0x90, 0x00, 0x39, 0x4a, 0x80, 0x7c, 0xe5, 0xfa, 0xa1, 0xa3, 0x76,
	0x51, 0xed, 0xf2, 0xc0, 0x97, 0x4e, 0x80, 0xea, 0x20, 0x14, 0x6d, 0x77, 0xf8, 0x5f, 0xb0, 0xce,
	0x9a, 0x1b, 0xb5, 0x7d, 0x57, 0xa9, 0x20, 0xda, 0xde, 0xae, 0xe9, 0x82, 0xd7, 0xfe, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0xe2, 0xc0, 0x58, 0x5e, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserRegistryClient is the client API for UserRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserRegistryClient interface {
	// Register a new user. This method may be restricted by network settings.
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	// List users of the network. This method is typically restricted to admins only.
	List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*Users, error)
	// Update the user, changing the fields specified by the field mask to the provided values.
	// This method can not be used to change the password, see the UpdatePassword method for that.
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Create a temporary password that can be used for updating a forgotten password.
	// The generated password is sent to the user's email address.
	CreateTemporaryPassword(ctx context.Context, in *CreateTemporaryPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Update the password of the user.
	UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete the user. This may not release the user ID for reuse.
	Delete(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Purge the user. This will release the user ID for reuse.
	// The user is responsible for clearing data from any (external) integrations
	// that may store and expose data by user or organization ID.
	Purge(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Transfer all rights that the user has on entities to another user.
	TransferUserRights(ctx context.Context, in *TransferUserRightsRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type userRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserRegistryClient(cc *grpc.ClientConn) UserRegistryClient {
	return &userRegistryClient{cc}
}

func (c *userRegistryClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) CreateTemporaryPassword(ctx context.Context, in *CreateTemporaryPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/CreateTemporaryPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Delete(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) Purge(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegistryClient) TransferUserRights(ctx context.Context, in *TransferUserRightsRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserRegistry/TransferUserRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegistryServer is the server API for UserRegistry service.
type UserRegistryServer interface {
	// Register a new user. This method may be restricted by network settings.
	Create(context.Context, *CreateUserRequest) (*User, error)
	// Get the user with the given identifiers, selecting the fields given by the
	// field mask. The method may return more or less fields, depending on the rights
	// of the caller.
	Get(context.Context, *GetUserRequest) (*User, error)
	// List users of the network. This method is typically restricted to admins only.
	List(context.Context, *ListUsersRequest) (*Users, error)
	// Update the user, changing the fields specified by the field mask to the provided values.
	// This method can not be used to change the password, see the UpdatePassword method for that.
	Update(context.Context, *UpdateUserRequest) (*User, error)
	// Create a temporary password that can be used for updating a forgotten password.
	// The generated password is sent to the user's email address.
	CreateTemporaryPassword(context.Context, *CreateTemporaryPasswordRequest) (*types.Empty, error)
	// Update the password of the user.
	UpdatePassword(context.Context, *UpdateUserPasswordRequest) (*types.Empty, error)
	// Delete the user. This may not release the user ID for reuse.
	Delete(context.Context, *UserIdentifiers) (*types.Empty, error)
	// Purge the user. This will release the user ID for reuse.
	// The user is responsible for clearing data from any (external) integrations
	// that may store and expose data by user or organization ID.
	Purge(context.Context, *UserIdentifiers) (*types.Empty, error)
	// Transfer all rights that the user has on entities to another user.
	TransferUserRights(context.Context, *TransferUserRightsRequest) (*types.Empty, error)
}

// UnimplementedUserRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedUserRegistryServer struct {
}

func (*UnimplementedUserRegistryServer) Create(ctx context.Context, req *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserRegistryServer) Get(ctx context.Context, req *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedUserRegistryServer) List(ctx context.Context, req *ListUsersRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserRegistryServer) Update(ctx context.Context, req *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserRegistryServer) CreateTemporaryPassword(ctx context.Context, req *CreateTemporaryPasswordRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryPassword not implemented")
}
func (*UnimplementedUserRegistryServer) UpdatePassword(ctx context.Context, req *UpdateUserPasswordRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (*UnimplementedUserRegistryServer) Delete(ctx context.Context, req *UserIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedUserRegistryServer) Purge(ctx context.Context, req *UserIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (*UnimplementedUserRegistryServer) TransferUserRights(ctx context.Context, req *TransferUserRightsRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferUserRights not implemented")
}

func RegisterUserRegistryServer(s *grpc.Server, srv UserRegistryServer) {
	s.RegisterService(&_UserRegistry_serviceDesc, srv)
}

func _UserRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).List(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_CreateTemporaryPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).CreateTemporaryPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/CreateTemporaryPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).CreateTemporaryPassword(ctx, req.(*CreateTemporaryPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).UpdatePassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Delete(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).Purge(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegistry_TransferUserRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferUserRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).TransferUserRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserRegistry/TransferUserRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).TransferUserRights(ctx, req.(*TransferUserRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserRegistry",
	HandlerType: (*UserRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserRegistry_Update_Handler,
		},
		{
			MethodName: "CreateTemporaryPassword",
			Handler:    _UserRegistry_CreateTemporaryPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserRegistry_UpdatePassword_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserRegistry_Delete_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _UserRegistry_Purge_Handler,
		},
		{
			MethodName: "TransferUserRights",
			Handler:    _UserRegistry_TransferUserRights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// UserAccessClient is the client API for UserAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAccessClient interface {
	// List the rights the caller has on this user.
	ListRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	// Create an API key scoped to this user.
	// User API keys can give access to the user itself, as well as
	// any organization, application, gateway and OAuth client this user is a collaborator of.
	CreateAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// List the API keys for this user.
	ListAPIKeys(ctx context.Context, in *ListUserAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error)
	// Get a single API key of this user.
	GetAPIKey(ctx context.Context, in *GetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Update the rights of an API key of the user.
	// This method can also be used to delete the API key, by giving it no rights.
	// The caller is required to have all assigned or/and removed rights.
	UpdateAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
}

type userAccessClient struct {
	cc *grpc.ClientConn
}

func NewUserAccessClient(cc *grpc.ClientConn) UserAccessClient {
	return &userAccessClient{cc}
}

func (c *userAccessClient) ListRights(ctx context.Context, in *UserIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) CreateAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) ListAPIKeys(ctx context.Context, in *ListUserAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) GetAPIKey(ctx context.Context, in *GetUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccessServer is the server API for UserAccess service.
type UserAccessServer interface {
	// List the rights the caller has on this user.
	ListRights(context.Context, *UserIdentifiers) (*Rights, error)
	// Create an API key scoped to this user.
	// User API keys can give access to the user itself, as well as
	// any organization, application, gateway and OAuth client this user is a collaborator of.
	CreateAPIKey(context.Context, *CreateUserAPIKeyRequest) (*APIKey, error)
	// List the API keys for this user.
	ListAPIKeys(context.Context, *ListUserAPIKeysRequest) (*APIKeys, error)
	// Get a single API key of this user.
	GetAPIKey(context.Context, *GetUserAPIKeyRequest) (*APIKey, error)
	// Update the rights of an API key of the user.
	// This method can also be used to delete the API key, by giving it no rights.
	// The caller is required to have all assigned or/and removed rights.
	UpdateAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*APIKey, error)
}

// UnimplementedUserAccessServer can be embedded to have forward compatible implementations.
type UnimplementedUserAccessServer struct {
}

func (*UnimplementedUserAccessServer) ListRights(ctx context.Context, req *UserIdentifiers) (*Rights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRights not implemented")
}
func (*UnimplementedUserAccessServer) CreateAPIKey(ctx context.Context, req *CreateUserAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedUserAccessServer) ListAPIKeys(ctx context.Context, req *ListUserAPIKeysRequest) (*APIKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedUserAccessServer) GetAPIKey(ctx context.Context, req *GetUserAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (*UnimplementedUserAccessServer) UpdateAPIKey(ctx context.Context, req *UpdateUserAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}

func RegisterUserAccessServer(s *grpc.Server, srv UserAccessServer) {
	s.RegisterService(&_UserAccess_serviceDesc, srv)
}

func _UserAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListRights(ctx, req.(*UserIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).CreateAPIKey(ctx, req.(*CreateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).ListAPIKeys(ctx, req.(*ListUserAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).GetAPIKey(ctx, req.(*GetUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessServer).UpdateAPIKey(ctx, req.(*UpdateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserAccess",
	HandlerType: (*UserAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _UserAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _UserAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _UserAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _UserAccess_GetAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _UserAccess_UpdateAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// UserInvitationRegistryClient is the client API for UserInvitationRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserInvitationRegistryClient interface {
	// Invite a user to join the network.
	Send(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*Invitation, error)
	// List the invitations the caller has sent.
	List(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*Invitations, error)
	// Delete (revoke) a user invitation.
	Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type userInvitationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserInvitationRegistryClient(cc *grpc.ClientConn) UserInvitationRegistryClient {
	return &userInvitationRegistryClient{cc}
}

func (c *userInvitationRegistryClient) Send(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*Invitation, error) {
	out := new(Invitation)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) List(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*Invitations, error) {
	out := new(Invitations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInvitationRegistryClient) Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserInvitationRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInvitationRegistryServer is the server API for UserInvitationRegistry service.
type UserInvitationRegistryServer interface {
	// Invite a user to join the network.
	Send(context.Context, *SendInvitationRequest) (*Invitation, error)
	// List the invitations the caller has sent.
	List(context.Context, *ListInvitationsRequest) (*Invitations, error)
	// Delete (revoke) a user invitation.
	Delete(context.Context, *DeleteInvitationRequest) (*types.Empty, error)
}

// UnimplementedUserInvitationRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedUserInvitationRegistryServer struct {
}

func (*UnimplementedUserInvitationRegistryServer) Send(ctx context.Context, req *SendInvitationRequest) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedUserInvitationRegistryServer) List(ctx context.Context, req *ListInvitationsRequest) (*Invitations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserInvitationRegistryServer) Delete(ctx context.Context, req *DeleteInvitationRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterUserInvitationRegistryServer(s *grpc.Server, srv UserInvitationRegistryServer) {
	s.RegisterService(&_UserInvitationRegistry_serviceDesc, srv)
}

func _UserInvitationRegistry_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).Send(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).List(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInvitationRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInvitationRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserInvitationRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInvitationRegistryServer).Delete(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserInvitationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserInvitationRegistry",
	HandlerType: (*UserInvitationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _UserInvitationRegistry_Send_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserInvitationRegistry_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserInvitationRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}

// UserSessionRegistryClient is the client API for UserSessionRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSessionRegistryClient interface {
	// List the active sessions for the given user.
	List(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*UserSessions, error)
	// Delete (revoke) the given user session.
	Delete(ctx context.Context, in *UserSessionIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type userSessionRegistryClient struct {
	cc *grpc.ClientConn
}

func NewUserSessionRegistryClient(cc *grpc.ClientConn) UserSessionRegistryClient {
	return &userSessionRegistryClient{cc}
}

func (c *userSessionRegistryClient) List(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*UserSessions, error) {
	out := new(UserSessions)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserSessionRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionRegistryClient) Delete(ctx context.Context, in *UserSessionIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.UserSessionRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSessionRegistryServer is the server API for UserSessionRegistry service.
type UserSessionRegistryServer interface {
	// List the active sessions for the given user.
	List(context.Context, *ListUserSessionsRequest) (*UserSessions, error)
	// Delete (revoke) the given user session.
	Delete(context.Context, *UserSessionIdentifiers) (*types.Empty, error)
}

// UnimplementedUserSessionRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedUserSessionRegistryServer struct {
}

func (*UnimplementedUserSessionRegistryServer) List(ctx context.Context, req *ListUserSessionsRequest) (*UserSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserSessionRegistryServer) Delete(ctx context.Context, req *UserSessionIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterUserSessionRegistryServer(s *grpc.Server, srv UserSessionRegistryServer) {
	s.RegisterService(&_UserSessionRegistry_serviceDesc, srv)
}

func _UserSessionRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserSessionRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionRegistryServer).List(ctx, req.(*ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.UserSessionRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionRegistryServer).Delete(ctx, req.(*UserSessionIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSessionRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.UserSessionRegistry",
	HandlerType: (*UserSessionRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserSessionRegistry_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserSessionRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/user_services.proto",
}
